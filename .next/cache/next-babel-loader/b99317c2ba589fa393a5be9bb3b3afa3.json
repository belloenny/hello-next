{"ast":null,"code":"import _taggedTemplateLiteral from \"@babel/runtime-corejs2/helpers/esm/taggedTemplateLiteral\";\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n    query Restaurants {\\n  restaurants {\\n    Name\\n    categories {\\n      id\\n      name\\n    }\\n    picture {\\n      url\\n    }\\n  }\\n}\\n    \"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\n/* eslint-disable */\nimport gql from 'graphql-tag';\nimport * as ApolloReactHooks from '@apollo/react-hooks';\nexport var CacheControlScope;\n\n(function (CacheControlScope) {\n  CacheControlScope[\"Public\"] = \"PUBLIC\";\n  CacheControlScope[\"Private\"] = \"PRIVATE\";\n})(CacheControlScope || (CacheControlScope = {}));\n\nexport var RestaurantsDocument = gql(_templateObject());\n/**\n * __useRestaurantsQuery__\n *\n * To run a query within a React component, call `useRestaurantsQuery` and pass it any options that fit your needs.\n * When your component renders, `useRestaurantsQuery` returns an object from Apollo Client that contains loading, error, and data properties \n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useRestaurantsQuery({\n *   variables: {\n *   },\n * });\n */\n\nexport function useRestaurantsQuery(baseOptions) {\n  return ApolloReactHooks.useQuery(RestaurantsDocument, baseOptions);\n}\nexport function useRestaurantsLazyQuery(baseOptions) {\n  return ApolloReactHooks.useLazyQuery(RestaurantsDocument, baseOptions);\n}","map":{"version":3,"sources":["/Users/mac/Desktop/hello-next/graphql/types.tsx"],"names":["gql","ApolloReactHooks","CacheControlScope","RestaurantsDocument","useRestaurantsQuery","baseOptions","useQuery","useRestaurantsLazyQuery","useLazyQuery"],"mappings":";;;;;;;;;;;;AAAA;AACA,OAAOA,GAAP,MAAgB,aAAhB;AAEA,OAAO,KAAKC,gBAAZ,MAAkC,qBAAlC;AAkBA,WAAYC,iBAAZ;;WAAYA,iB;AAAAA,EAAAA,iB;AAAAA,EAAAA,iB;GAAAA,iB,KAAAA,iB;;AA+iBZ,OAAO,IAAMC,mBAAmB,GAAGH,GAAH,mBAAzB;AAeP;;;;;;;;;;;;;;;;AAeA,OAAO,SAASI,mBAAT,CAA6BC,WAA7B,EAA2H;AAC1H,SAAOJ,gBAAgB,CAACK,QAAjB,CAAuEH,mBAAvE,EAA4FE,WAA5F,CAAP;AACD;AACP,OAAO,SAASE,uBAAT,CAAiCF,WAAjC,EAAmI;AAChI,SAAOJ,gBAAgB,CAACO,YAAjB,CAA2EL,mBAA3E,EAAgGE,WAAhG,CAAP;AACD","sourcesContent":["/* eslint-disable */\nimport gql from 'graphql-tag';\nimport * as ApolloReactCommon from '@apollo/react-common';\nimport * as ApolloReactHooks from '@apollo/react-hooks';\nexport type Maybe<T> = T | null;\n\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string,\n  String: string,\n  Boolean: boolean,\n  Int: number,\n  Float: number,\n  JSON: any,\n  DateTime: any,\n  Upload: any,\n  Time: any,\n  Date: any,\n  Long: any,\n};\n\nexport enum CacheControlScope {\n  Public = 'PUBLIC',\n  Private = 'PRIVATE'\n}\n\nexport type Categories = {\n   __typename?: 'Categories',\n  name: Scalars['String'],\n  restaurants?: Maybe<Array<Maybe<Restaurant>>>,\n  id: Scalars['ID'],\n  created_at: Scalars['DateTime'],\n  updated_at: Scalars['DateTime'],\n};\n\n\nexport type CategoriesRestaurantsArgs = {\n  sort?: Maybe<Scalars['String']>,\n  limit?: Maybe<Scalars['Int']>,\n  start?: Maybe<Scalars['Int']>,\n  where?: Maybe<Scalars['JSON']>\n};\n\nexport type CategoryInput = {\n  name: Scalars['String'],\n  restaurants?: Maybe<Array<Maybe<Scalars['ID']>>>,\n};\n\nexport type CreateCategoryInput = {\n  data?: Maybe<CategoryInput>,\n};\n\nexport type CreateCategoryPayload = {\n   __typename?: 'createCategoryPayload',\n  category?: Maybe<Categories>,\n};\n\nexport type CreateRestaurantInput = {\n  data?: Maybe<RestaurantInput>,\n};\n\nexport type CreateRestaurantPayload = {\n   __typename?: 'createRestaurantPayload',\n  restaurant?: Maybe<Restaurant>,\n};\n\nexport type CreateRoleInput = {\n  data?: Maybe<RoleInput>,\n};\n\nexport type CreateRolePayload = {\n   __typename?: 'createRolePayload',\n  role?: Maybe<UsersPermissionsRole>,\n};\n\nexport type CreateUserInput = {\n  data?: Maybe<UserInput>,\n};\n\nexport type CreateUserPayload = {\n   __typename?: 'createUserPayload',\n  user?: Maybe<UsersPermissionsUser>,\n};\n\n\n\nexport type DeleteCategoryInput = {\n  where?: Maybe<InputId>,\n};\n\nexport type DeleteCategoryPayload = {\n   __typename?: 'deleteCategoryPayload',\n  category?: Maybe<Categories>,\n};\n\nexport type DeleteRestaurantInput = {\n  where?: Maybe<InputId>,\n};\n\nexport type DeleteRestaurantPayload = {\n   __typename?: 'deleteRestaurantPayload',\n  restaurant?: Maybe<Restaurant>,\n};\n\nexport type DeleteRoleInput = {\n  where?: Maybe<InputId>,\n};\n\nexport type DeleteRolePayload = {\n   __typename?: 'deleteRolePayload',\n  role?: Maybe<UsersPermissionsRole>,\n};\n\nexport type DeleteUserInput = {\n  where?: Maybe<InputId>,\n};\n\nexport type DeleteUserPayload = {\n   __typename?: 'deleteUserPayload',\n  user?: Maybe<UsersPermissionsUser>,\n};\n\nexport type EditCategoryInput = {\n  name?: Maybe<Scalars['String']>,\n  restaurants?: Maybe<Array<Maybe<Scalars['ID']>>>,\n};\n\nexport type EditFileInput = {\n  name?: Maybe<Scalars['String']>,\n  hash?: Maybe<Scalars['String']>,\n  sha256?: Maybe<Scalars['String']>,\n  ext?: Maybe<Scalars['String']>,\n  mime?: Maybe<Scalars['String']>,\n  size?: Maybe<Scalars['Float']>,\n  url?: Maybe<Scalars['String']>,\n  provider?: Maybe<Scalars['String']>,\n  provider_metadata?: Maybe<Scalars['JSON']>,\n  related?: Maybe<Array<Maybe<Scalars['ID']>>>,\n};\n\nexport type EditRestaurantInput = {\n  Name?: Maybe<Scalars['String']>,\n  Description?: Maybe<Scalars['String']>,\n  categories?: Maybe<Array<Maybe<Scalars['ID']>>>,\n  picture?: Maybe<Scalars['ID']>,\n};\n\nexport type EditRoleInput = {\n  name?: Maybe<Scalars['String']>,\n  description?: Maybe<Scalars['String']>,\n  type?: Maybe<Scalars['String']>,\n  permissions?: Maybe<Array<Maybe<Scalars['ID']>>>,\n  users?: Maybe<Array<Maybe<Scalars['ID']>>>,\n};\n\nexport type EditUserInput = {\n  username?: Maybe<Scalars['String']>,\n  email?: Maybe<Scalars['String']>,\n  provider?: Maybe<Scalars['String']>,\n  password?: Maybe<Scalars['String']>,\n  resetPasswordToken?: Maybe<Scalars['String']>,\n  confirmed?: Maybe<Scalars['Boolean']>,\n  blocked?: Maybe<Scalars['Boolean']>,\n  role?: Maybe<Scalars['ID']>,\n};\n\nexport type FileInput = {\n  name: Scalars['String'],\n  hash: Scalars['String'],\n  sha256?: Maybe<Scalars['String']>,\n  ext?: Maybe<Scalars['String']>,\n  mime: Scalars['String'],\n  size: Scalars['Float'],\n  url: Scalars['String'],\n  provider: Scalars['String'],\n  provider_metadata?: Maybe<Scalars['JSON']>,\n  related?: Maybe<Array<Maybe<Scalars['ID']>>>,\n};\n\nexport type InputId = {\n  id: Scalars['ID'],\n};\n\n\n\nexport type Morph = UsersPermissionsMe | UsersPermissionsMeRole | UsersPermissionsLoginPayload | Categories | CreateCategoryPayload | UpdateCategoryPayload | DeleteCategoryPayload | Restaurant | CreateRestaurantPayload | UpdateRestaurantPayload | DeleteRestaurantPayload | UploadFile | UsersPermissionsPermission | UsersPermissionsRole | CreateRolePayload | UpdateRolePayload | DeleteRolePayload | UsersPermissionsUser | CreateUserPayload | UpdateUserPayload | DeleteUserPayload;\n\nexport type Mutation = {\n   __typename?: 'Mutation',\n  createCategory?: Maybe<CreateCategoryPayload>,\n  updateCategory?: Maybe<UpdateCategoryPayload>,\n  deleteCategory?: Maybe<DeleteCategoryPayload>,\n  createRestaurant?: Maybe<CreateRestaurantPayload>,\n  updateRestaurant?: Maybe<UpdateRestaurantPayload>,\n  deleteRestaurant?: Maybe<DeleteRestaurantPayload>,\n  createRole?: Maybe<CreateRolePayload>,\n  updateRole?: Maybe<UpdateRolePayload>,\n  deleteRole?: Maybe<DeleteRolePayload>,\n  createUser?: Maybe<CreateUserPayload>,\n  updateUser?: Maybe<UpdateUserPayload>,\n  deleteUser?: Maybe<DeleteUserPayload>,\n  upload: UploadFile,\n  multipleUpload: Array<Maybe<UploadFile>>,\n  login: UsersPermissionsLoginPayload,\n  register: UsersPermissionsLoginPayload,\n};\n\n\nexport type MutationCreateCategoryArgs = {\n  input?: Maybe<CreateCategoryInput>\n};\n\n\nexport type MutationUpdateCategoryArgs = {\n  input?: Maybe<UpdateCategoryInput>\n};\n\n\nexport type MutationDeleteCategoryArgs = {\n  input?: Maybe<DeleteCategoryInput>\n};\n\n\nexport type MutationCreateRestaurantArgs = {\n  input?: Maybe<CreateRestaurantInput>\n};\n\n\nexport type MutationUpdateRestaurantArgs = {\n  input?: Maybe<UpdateRestaurantInput>\n};\n\n\nexport type MutationDeleteRestaurantArgs = {\n  input?: Maybe<DeleteRestaurantInput>\n};\n\n\nexport type MutationCreateRoleArgs = {\n  input?: Maybe<CreateRoleInput>\n};\n\n\nexport type MutationUpdateRoleArgs = {\n  input?: Maybe<UpdateRoleInput>\n};\n\n\nexport type MutationDeleteRoleArgs = {\n  input?: Maybe<DeleteRoleInput>\n};\n\n\nexport type MutationCreateUserArgs = {\n  input?: Maybe<CreateUserInput>\n};\n\n\nexport type MutationUpdateUserArgs = {\n  input?: Maybe<UpdateUserInput>\n};\n\n\nexport type MutationDeleteUserArgs = {\n  input?: Maybe<DeleteUserInput>\n};\n\n\nexport type MutationUploadArgs = {\n  refId?: Maybe<Scalars['ID']>,\n  ref?: Maybe<Scalars['String']>,\n  field?: Maybe<Scalars['String']>,\n  source?: Maybe<Scalars['String']>,\n  file: Scalars['Upload']\n};\n\n\nexport type MutationMultipleUploadArgs = {\n  refId?: Maybe<Scalars['ID']>,\n  ref?: Maybe<Scalars['String']>,\n  field?: Maybe<Scalars['String']>,\n  source?: Maybe<Scalars['String']>,\n  files: Array<Maybe<Scalars['Upload']>>\n};\n\n\nexport type MutationLoginArgs = {\n  input: UsersPermissionsLoginInput\n};\n\n\nexport type MutationRegisterArgs = {\n  input: UserInput\n};\n\nexport type Query = {\n   __typename?: 'Query',\n  category?: Maybe<Categories>,\n  categories?: Maybe<Array<Maybe<Categories>>>,\n  restaurant?: Maybe<Restaurant>,\n  restaurants?: Maybe<Array<Maybe<Restaurant>>>,\n  files?: Maybe<Array<Maybe<UploadFile>>>,\n  role?: Maybe<UsersPermissionsRole>,\n  roles?: Maybe<Array<Maybe<UsersPermissionsRole>>>,\n  user?: Maybe<UsersPermissionsUser>,\n  users?: Maybe<Array<Maybe<UsersPermissionsUser>>>,\n  me?: Maybe<UsersPermissionsMe>,\n};\n\n\nexport type QueryCategoryArgs = {\n  id: Scalars['ID']\n};\n\n\nexport type QueryCategoriesArgs = {\n  sort?: Maybe<Scalars['String']>,\n  limit?: Maybe<Scalars['Int']>,\n  start?: Maybe<Scalars['Int']>,\n  where?: Maybe<Scalars['JSON']>\n};\n\n\nexport type QueryRestaurantArgs = {\n  id: Scalars['ID']\n};\n\n\nexport type QueryRestaurantsArgs = {\n  sort?: Maybe<Scalars['String']>,\n  limit?: Maybe<Scalars['Int']>,\n  start?: Maybe<Scalars['Int']>,\n  where?: Maybe<Scalars['JSON']>\n};\n\n\nexport type QueryFilesArgs = {\n  sort?: Maybe<Scalars['String']>,\n  limit?: Maybe<Scalars['Int']>,\n  start?: Maybe<Scalars['Int']>,\n  where?: Maybe<Scalars['JSON']>\n};\n\n\nexport type QueryRoleArgs = {\n  id: Scalars['ID']\n};\n\n\nexport type QueryRolesArgs = {\n  sort?: Maybe<Scalars['String']>,\n  limit?: Maybe<Scalars['Int']>,\n  start?: Maybe<Scalars['Int']>,\n  where?: Maybe<Scalars['JSON']>\n};\n\n\nexport type QueryUserArgs = {\n  id: Scalars['ID']\n};\n\n\nexport type QueryUsersArgs = {\n  sort?: Maybe<Scalars['String']>,\n  limit?: Maybe<Scalars['Int']>,\n  start?: Maybe<Scalars['Int']>,\n  where?: Maybe<Scalars['JSON']>\n};\n\nexport type Restaurant = {\n   __typename?: 'Restaurant',\n  Name: Scalars['String'],\n  Description: Scalars['String'],\n  picture?: Maybe<UploadFile>,\n  categories?: Maybe<Array<Maybe<Categories>>>,\n  id: Scalars['ID'],\n  created_at: Scalars['DateTime'],\n  updated_at: Scalars['DateTime'],\n};\n\n\nexport type RestaurantCategoriesArgs = {\n  sort?: Maybe<Scalars['String']>,\n  limit?: Maybe<Scalars['Int']>,\n  start?: Maybe<Scalars['Int']>,\n  where?: Maybe<Scalars['JSON']>\n};\n\nexport type RestaurantInput = {\n  Name: Scalars['String'],\n  Description: Scalars['String'],\n  categories?: Maybe<Array<Maybe<Scalars['ID']>>>,\n  picture?: Maybe<Scalars['ID']>,\n};\n\nexport type RoleInput = {\n  name: Scalars['String'],\n  description?: Maybe<Scalars['String']>,\n  type?: Maybe<Scalars['String']>,\n  permissions?: Maybe<Array<Maybe<Scalars['ID']>>>,\n  users?: Maybe<Array<Maybe<Scalars['ID']>>>,\n};\n\n\nexport type UpdateCategoryInput = {\n  where?: Maybe<InputId>,\n  data?: Maybe<EditCategoryInput>,\n};\n\nexport type UpdateCategoryPayload = {\n   __typename?: 'updateCategoryPayload',\n  category?: Maybe<Categories>,\n};\n\nexport type UpdateRestaurantInput = {\n  where?: Maybe<InputId>,\n  data?: Maybe<EditRestaurantInput>,\n};\n\nexport type UpdateRestaurantPayload = {\n   __typename?: 'updateRestaurantPayload',\n  restaurant?: Maybe<Restaurant>,\n};\n\nexport type UpdateRoleInput = {\n  where?: Maybe<InputId>,\n  data?: Maybe<EditRoleInput>,\n};\n\nexport type UpdateRolePayload = {\n   __typename?: 'updateRolePayload',\n  role?: Maybe<UsersPermissionsRole>,\n};\n\nexport type UpdateUserInput = {\n  where?: Maybe<InputId>,\n  data?: Maybe<EditUserInput>,\n};\n\nexport type UpdateUserPayload = {\n   __typename?: 'updateUserPayload',\n  user?: Maybe<UsersPermissionsUser>,\n};\n\n\nexport type UploadFile = {\n   __typename?: 'UploadFile',\n  name: Scalars['String'],\n  hash: Scalars['String'],\n  sha256?: Maybe<Scalars['String']>,\n  ext?: Maybe<Scalars['String']>,\n  mime: Scalars['String'],\n  size: Scalars['Float'],\n  url: Scalars['String'],\n  provider: Scalars['String'],\n  provider_metadata?: Maybe<Scalars['JSON']>,\n  related?: Maybe<Array<Maybe<Morph>>>,\n  id: Scalars['ID'],\n  created_at: Scalars['DateTime'],\n  updated_at: Scalars['DateTime'],\n};\n\n\nexport type UploadFileRelatedArgs = {\n  sort?: Maybe<Scalars['String']>,\n  limit?: Maybe<Scalars['Int']>,\n  start?: Maybe<Scalars['Int']>,\n  where?: Maybe<Scalars['JSON']>\n};\n\nexport type UserInput = {\n  username: Scalars['String'],\n  email: Scalars['String'],\n  provider?: Maybe<Scalars['String']>,\n  password?: Maybe<Scalars['String']>,\n  resetPasswordToken?: Maybe<Scalars['String']>,\n  confirmed?: Maybe<Scalars['Boolean']>,\n  blocked?: Maybe<Scalars['Boolean']>,\n  role?: Maybe<Scalars['ID']>,\n};\n\nexport type UsersPermissionsLoginInput = {\n  identifier: Scalars['String'],\n  password: Scalars['String'],\n  provider?: Maybe<Scalars['String']>,\n};\n\nexport type UsersPermissionsLoginPayload = {\n   __typename?: 'UsersPermissionsLoginPayload',\n  jwt: Scalars['String'],\n  user: UsersPermissionsMe,\n};\n\nexport type UsersPermissionsMe = {\n   __typename?: 'UsersPermissionsMe',\n  id: Scalars['ID'],\n  username: Scalars['String'],\n  email: Scalars['String'],\n  confirmed?: Maybe<Scalars['Boolean']>,\n  blocked?: Maybe<Scalars['Boolean']>,\n  role?: Maybe<UsersPermissionsMeRole>,\n};\n\nexport type UsersPermissionsMeRole = {\n   __typename?: 'UsersPermissionsMeRole',\n  id: Scalars['ID'],\n  name: Scalars['String'],\n  description?: Maybe<Scalars['String']>,\n  type?: Maybe<Scalars['String']>,\n};\n\nexport type UsersPermissionsPermission = {\n   __typename?: 'UsersPermissionsPermission',\n  type: Scalars['String'],\n  controller: Scalars['String'],\n  action: Scalars['String'],\n  enabled: Scalars['Boolean'],\n  policy?: Maybe<Scalars['String']>,\n  role?: Maybe<UsersPermissionsRole>,\n  id: Scalars['ID'],\n};\n\nexport type UsersPermissionsRole = {\n   __typename?: 'UsersPermissionsRole',\n  name: Scalars['String'],\n  description?: Maybe<Scalars['String']>,\n  type?: Maybe<Scalars['String']>,\n  permissions?: Maybe<Array<Maybe<UsersPermissionsPermission>>>,\n  users?: Maybe<Array<Maybe<UsersPermissionsUser>>>,\n  id: Scalars['ID'],\n};\n\n\nexport type UsersPermissionsRolePermissionsArgs = {\n  sort?: Maybe<Scalars['String']>,\n  limit?: Maybe<Scalars['Int']>,\n  start?: Maybe<Scalars['Int']>,\n  where?: Maybe<Scalars['JSON']>\n};\n\n\nexport type UsersPermissionsRoleUsersArgs = {\n  sort?: Maybe<Scalars['String']>,\n  limit?: Maybe<Scalars['Int']>,\n  start?: Maybe<Scalars['Int']>,\n  where?: Maybe<Scalars['JSON']>\n};\n\nexport type UsersPermissionsUser = {\n   __typename?: 'UsersPermissionsUser',\n  username: Scalars['String'],\n  email: Scalars['String'],\n  provider?: Maybe<Scalars['String']>,\n  confirmed?: Maybe<Scalars['Boolean']>,\n  blocked?: Maybe<Scalars['Boolean']>,\n  role?: Maybe<UsersPermissionsRole>,\n  id: Scalars['ID'],\n  created_at: Scalars['DateTime'],\n  updated_at: Scalars['DateTime'],\n};\n\nexport type RestaurantsQueryVariables = {};\n\n\nexport type RestaurantsQuery = (\n  { __typename?: 'Query' }\n  & { restaurants: Maybe<Array<Maybe<(\n    { __typename?: 'Restaurant' }\n    & Pick<Restaurant, 'Name'>\n    & { categories: Maybe<Array<Maybe<(\n      { __typename?: 'Categories' }\n      & Pick<Categories, 'id' | 'name'>\n    )>>>, picture: Maybe<(\n      { __typename?: 'UploadFile' }\n      & Pick<UploadFile, 'url'>\n    )> }\n  )>>> }\n);\n\n\nexport const RestaurantsDocument = gql`\n    query Restaurants {\n  restaurants {\n    Name\n    categories {\n      id\n      name\n    }\n    picture {\n      url\n    }\n  }\n}\n    `;\n\n/**\n * __useRestaurantsQuery__\n *\n * To run a query within a React component, call `useRestaurantsQuery` and pass it any options that fit your needs.\n * When your component renders, `useRestaurantsQuery` returns an object from Apollo Client that contains loading, error, and data properties \n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useRestaurantsQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useRestaurantsQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<RestaurantsQuery, RestaurantsQueryVariables>) {\n        return ApolloReactHooks.useQuery<RestaurantsQuery, RestaurantsQueryVariables>(RestaurantsDocument, baseOptions);\n      }\nexport function useRestaurantsLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<RestaurantsQuery, RestaurantsQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<RestaurantsQuery, RestaurantsQueryVariables>(RestaurantsDocument, baseOptions);\n        }\nexport type RestaurantsQueryHookResult = ReturnType<typeof useRestaurantsQuery>;\nexport type RestaurantsLazyQueryHookResult = ReturnType<typeof useRestaurantsLazyQuery>;\nexport type RestaurantsQueryResult = ApolloReactCommon.QueryResult<RestaurantsQuery, RestaurantsQueryVariables>;"]},"metadata":{},"sourceType":"module"}